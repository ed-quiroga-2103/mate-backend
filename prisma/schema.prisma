generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model graphs {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  links    Json[]
  nodes    Json[]
  courseId String
  course   course @relation(fields: [courseId], references: [id])
}

model course {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  description String
  name        String
  status      String
  code        String      @unique
  dependecies String[]
  subjects    subject[]
  questions   questions[]
  quiz        quiz[]
  graph       graphs[]
}

model subject {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  resources    Json[]
  questions    questions[]
  courseId     String?     @db.ObjectId
  course       course?     @relation(fields: [courseId], references: [id])
  dependencies String[]
  quiz         quiz[]
}

model users {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  admitionYear String
  dni          String
  email        String
  lastCourse   String
  lastName     String
  name         String
  password     String
  progress     Json

  averageGrade  Float?
  evaluationQty Int?
  grades        Json[]
  averageVector Json?
  isAdmin       Boolean?
}

model questions {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  tags       String[]
  url        String?
  difficulty String
  options    Json[]
  courseId   String   @db.ObjectId
  course     course   @relation(fields: [courseId], references: [id])
  subjectId  String?  @db.ObjectId
  subject    subject? @relation(fields: [subjectId], references: [id])
  evalVector Json
}

model quiz {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  questions    Json[]
  tags         String[]
  courseId     String       @db.ObjectId
  course       course       @relation(fields: [courseId], references: [id])
  isDiagnostic Boolean?
  subjectId    String?
  subject      subject?     @relation(fields: [subjectId], references: [id])
  quizResult   quizResult[]
}

model quizResult {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  answers    Json[]
  approved   Boolean
  percentage Float
  quizId     String  @db.ObjectId
  quiz       quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model registrationCode {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  code        String
  generatedBy String
  status      String @default("pending")
}
